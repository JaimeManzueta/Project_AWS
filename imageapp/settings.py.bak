# imageapp/settings.py
# -----------------------------------------------------------------------------
# Minimal, dev-friendly Django settings for CIS4517/5517 demos on EC2.
# - SQLite for simplicity
# - Static files work with collectstatic (if you later add CSS/JS)
# - Allows your EC2 IP/DNS
# - Exposes S3 env vars (views.py uses boto3 directly)
# -----------------------------------------------------------------------------

from pathlib import Path
import os

# Base path of the project (same dir that contains manage.py)
BASE_DIR = Path(__file__).resolve().parent.parent

# -----------------------------------------------------------------------------
# Core Django settings
# -----------------------------------------------------------------------------

# Dev-only secret key. DO NOT use in production.
SECRET_KEY = "dev-only-unsafe-key-change-me"

# Keep True for class demos; set False in real deployments.
DEBUG = True

# Hosts you will serve from. Include your EC2 public IP and DNS.
# Add more if your IP changes or you use a domain.
ALLOWED_HOSTS = ['18.191.146.10','localhost','127.0.0.1']
    "18.191.164.156",                           # your EC2 public IP
    "localhost",
    "127.0.0.1",
    # EC2 public DNS (add yours if you’ll visit via DNS):
    "ec2-18-191-164-156.us-east-2.compute.amazonaws.com",
]

# If you see CSRF 403s behind a proxy/HTTPS, include the exact scheme+host here.
# It’s safe to keep for dev; Django ignores items that don’t apply.
CSRF_TRUSTED_ORIGINS = [
    "http://18.191.164.156",
    "https://18.191.164.156",
    "http://ec2-18-191-164-156.us-east-2.compute.amazonaws.com",
    "https://ec2-18-191-164-156.us-east-2.compute.amazonaws.com",
]

INSTALLED_APPS = [
    # Django contrib apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Your app
    "photoapp",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Top-level URL config (imageapp/urls.py)
ROOT_URLCONF = "imageapp.urls"

# We don’t use templates for this demo; views return inline HTML.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],   # leave empty; no template dirs needed
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI entry point (used by runserver/gunicorn)
WSGI_APPLICATION = "imageapp.wsgi.application"

# -----------------------------------------------------------------------------
# Database (SQLite for simplicity)
# -----------------------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# -----------------------------------------------------------------------------
# Password validation (kept default; not relevant for the demo)
# -----------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -----------------------------------------------------------------------------
# I18N / TZ
# -----------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# -----------------------------------------------------------------------------
# Static files
# -----------------------------------------------------------------------------
# URL prefix for static files
STATIC_URL = "/static/"

# Where 'collectstatic' will put files (useful if you later add CSS/JS).
# Nginx (or Django runserver) can serve from here.
STATIC_ROOT = BASE_DIR / "staticfiles"

# If you also keep project-local static assets, you can add:
# STATICFILES_DIRS = [BASE_DIR / "static"]

# Use BigAutoField by default (modern Django default). Keep AutoField if needed.
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -----------------------------------------------------------------------------
# AWS / S3-related env surfaced for clarity (views use boto3 directly).
# These fall back to sensible defaults for the class environment.
# -----------------------------------------------------------------------------
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME", "myclass1-bucket")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME") or os.getenv("AWS_REGION", "us-east-2")

# If you are behind a reverse proxy/Load Balancer terminating SSL,
# uncomment the next line so Django knows requests are HTTPS:
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# -----------------------------------------------------------------------------
# Optional: simple logging to help debug S3/requests during demos
# -----------------------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "loggers": {
        "django.request": {"handlers": ["console"], "level": "INFO"},
        "botocore": {"handlers": ["console"], "level": "WARNING"},
        "boto3": {"handlers": ["console"], "level": "WARNING"},
    },
}
